/*
 * Copyright 2014-2020 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
 */

apply from: rootProject.file('gradle/jdk.gradle')

def jdk = 7

if (project.name in project.ext.jdk11Modules) {
    jdk = 11
} else if (project.name in project.ext.jdk8Modules) {
    jdk = 8
} else if (project.name in project.ext.jdk7Modules) {
    jdk = 7
}

apply plugin: "kotlinx-atomicfu"

kotlin {
    jvm {
        compilations.all {
            if (rootProject.ext.jvm_ir_enabled) {
                kotlinOptions.useIR = true
            }

            kotlinOptions.freeCompilerArgs += ["-XXLanguage:+InlineClasses", "-Xuse-14-inline-classes-mangling-scheme"]
        }
    }

    jvmToolchain {
        def version = Math.max(8, jdk)
        languageVersion.set(JavaLanguageVersion.of(version))
    }

    task jarTest(type: Jar, dependsOn: jvmTestClasses) {
        from targets.jvm.compilations.test.output
        classifier 'test'
    }

    sourceSets {
        jvmMain.dependencies {
            api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
            if (jdk > 6) {
                api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: kotlin_version
            }
            if (jdk > 7) {
                api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
            }

            api(libs.slf4j.api)
        }

        jvmTest.dependencies {
            api 'org.jetbrains.kotlin:kotlin-test'
            api 'org.jetbrains.kotlin:kotlin-test-junit'

            api(libs.junit)
            api(libs.kotlin.test.junit)
            implementation(libs.kotlinx.coroutines.debug)
        }
    }
}

dependencies {
    if (jdk > 7) {
        jvmMainApi(libs.kotlinx.coroutines.jdk8)
    }
}

jvmTest {
    ignoreFailures = true
    maxHeapSize = "2g"
    exclude("**/*StressTest*")
}

task stressTest(type: Test) {
    classpath = files { jvmTest.classpath }
    testClassesDirs = files { jvmTest.testClassesDirs }

    ignoreFailures = true
    maxHeapSize = "2g"
    forkEvery = 1
    include("**/*StressTest*")
    systemProperty "enable.stress.tests", "true"
}

configurations {
    testOutput.extendsFrom(testCompile)
    boot
}

jvmJar {
    manifest {
        attributes("Implementation-Title": project.name, "Implementation-Version": configuredVersion)
    }
}
